-- Crear la funci√≥n user_company_id() primero, luego las pol√≠ticas RLS
-- Ejecutar en Supabase SQL Editor

-- ==========================================
-- PASO 1: CREAR FUNCI√ìN user_company_id()
-- ==========================================

-- Verificar si la funci√≥n ya existe
SELECT 'Verificando funci√≥n existente:' as info, 
    proname as nombre_funcion,
    pg_get_functiondef(oid) as definicion_funcion
FROM pg_proc 
WHERE proname = 'user_company_id';

-- Crear funci√≥n user_company_id() si no existe
CREATE OR REPLACE FUNCTION user_company_id()
RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    result_id UUID;
BEGIN
    -- Intentar obtener company_id desde public.users
    SELECT company_id INTO result_id
    FROM public.users 
    WHERE id = auth.uid()
    LIMIT 1;
    
    -- Si encontramos resultado v√°lido, devolverlo
    IF result_id IS NOT NULL THEN
        RETURN result_id;
    END IF;
    
    -- Si no encontramos en public.users, devolver NULL
    RETURN NULL;
    
END;
$$;

-- ==========================================
-- PASO 2: VERIFICAR QUE LA FUNCI√ìN FUNCIONA
-- ==========================================

-- Test b√°sico de la funci√≥n
SELECT 'Test funci√≥n user_company_id():' as info, 
    auth.uid() as user_id_actual,
    user_company_id() as company_id_obtenido;

-- ==========================================
-- PASO 3: SI LA FUNCI√ìN DEVUELVE NULL, DESCUBRIR POR QU√â
-- ==========================================

-- Verificar si el usuario actual tiene company_id en la tabla users
DO $$
DECLARE
    user_company UUID;
BEGIN
    -- Desactivar RLS temporalmente para diagnosticar
    SET row_security = off;
    
    -- Ver si el usuario actual est√° en la tabla users
    SELECT company_id INTO user_company
    FROM public.users 
    WHERE id = auth.uid();
    
    IF user_company IS NULL THEN
        RAISE NOTICE '‚ùå PROBLEMA: Usuario % no tiene company_id asignado', auth.uid();
        RAISE NOTICE 'üìç Soluci√≥n: Ejecutar script de asignaci√≥n de empresa';
    ELSE
        RAISE NOTICE '‚úÖ USUARIO OK: Tiene company_id = %', user_company;
    END IF;
    
    SET row_security = on;
END $$;

-- ==========================================
-- PASO 4: CREAR POL√çTICAS USANDO LA FUNCI√ìN
-- ==========================================

-- Eliminar pol√≠ticas existentes de modules
DO $$ 
DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT policyname FROM pg_policies WHERE schemaname = 'public' AND tablename = 'modules') LOOP
        EXECUTE 'DROP POLICY IF EXISTS ' || quote_ident(r.policyname) || ' ON public.modules';
        RAISE NOTICE 'Eliminada pol√≠tica modules: %', r.policyname;
    END LOOP;
END $$;

-- Eliminar pol√≠ticas existentes de module_data
DO $$ 
DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT policyname FROM pg_policies WHERE schemaname = 'public' AND tablename = 'module_data') LOOP
        EXECUTE 'DROP POLICY IF EXISTS ' || quote_ident(r.policyname) || ' ON public.module_data';
        RAISE NOTICE 'Eliminada pol√≠tica module_data: %', r.policyname;
    END LOOP;
END $$;

-- Crear pol√≠ticas para modules
CREATE POLICY "modules_select" ON public.modules
FOR SELECT USING (company_id = user_company_id());

CREATE POLICY "modules_insert" ON public.modules  
FOR INSERT WITH CHECK (company_id = user_company_id());

CREATE POLICY "modules_update" ON public.modules
FOR UPDATE USING (company_id = user_company_id());

CREATE POLICY "modules_delete" ON public.modules
FOR DELETE USING (company_id = user_company_id());

-- Crear pol√≠ticas para module_data
CREATE POLICY "module_data_select" ON public.module_data
FOR SELECT USING (company_id = user_company_id());

CREATE POLICY "module_data_insert" ON public.module_data
FOR INSERT WITH CHECK (company_id = user_company_id());

CREATE POLICY "module_data_update" ON public.module_data
FOR UPDATE USING (company_id = user_company_id());

CREATE POLICY "module_data_delete" ON public.module_data
FOR DELETE USING (company_id = user_company_id());

-- ==========================================
-- PASO 5: INSERTAR M√ìDULO DE PRUEBA
-- ==========================================

-- Limpiar datos anteriores
DELETE FROM public.module_data WHERE module_id IN (
  SELECT id FROM public.modules WHERE slug LIKE '%prueba%'
);
DELETE FROM public.modules WHERE slug LIKE '%prueba%' OR slug LIKE '%test%';

-- Insertar m√≥dulo de prueba usando la funci√≥n
INSERT INTO public.modules (
  company_id, 
  name, 
  slug, 
  version, 
  description, 
  icon,
  is_active,
  manifest
) VALUES (
  user_company_id(),
  'M√≥dulo Test',
  'modulo-test',
  '1.0.0',
  'M√≥dulo para probar que funciona la funci√≥n',
  'Package',
  true,
  '{"name":"M√≥dulo Test","slug":"modulo-test","version":"1.0.0","description":"Test","icon":"Package","fields":[{"name":"titulo","label":"T√≠tulo","type":"text","required":true}],"displayName":"Test","displayDescription":"Test"}'::jsonb
);

-- ==========================================
-- PASO 6: VERIFICACI√ìN FINAL
-- ==========================================

-- Verificar que se insert√≥ correctamente
SELECT 'M√≥dulo creado:' as resultado,
    id, name, slug, company_id, is_active
FROM public.modules 
WHERE slug = 'modulo-test';

-- Verificar pol√≠ticas creadas
SELECT 'Pol√≠ticas creadas:' as info,
    tablename, policyname, cmd
FROM pg_policies 
WHERE schemaname = 'public' 
AND tablename IN ('modules', 'module_data')
ORDER BY tablename, cmd;

-- ==========================================
-- RESULTADO FINAL
-- ==========================================

DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ FUNCI√ìN user_company_id() creada';
    RAISE NOTICE '‚úÖ POL√çTICAS RLS creadas para modules y module_data';
    RAISE NOTICE '‚úÖ M√≥dulo de prueba insertado correctamente';
    RAISE NOTICE 'üöÄ Sistema de m√≥dulos funcionando';
    RAISE NOTICE '';
END $$;
