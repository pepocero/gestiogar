# Script de limpieza para desarrollo - Gestiogar (PowerShell)
# 
# Este script ayuda a limpiar instancias m√∫ltiples de Supabase
# y otros problemas comunes en desarrollo.
# 
# Uso: .\scripts\cleanup.ps1

Write-Host "üßπ Iniciando limpieza de desarrollo..." -ForegroundColor Green

# Funci√≥n para limpiar archivos temporales
function Cleanup-TempFiles {
    Write-Host "üìÅ Limpiando archivos temporales..." -ForegroundColor Yellow
    
    $tempDirs = @(
        ".next",
        "node_modules\.cache",
        ".vercel",
        "dist",
        "build"
    )
    
    foreach ($dir in $tempDirs) {
        if (Test-Path $dir) {
            Write-Host "  üóëÔ∏è Eliminando $dir..." -ForegroundColor Red
            Remove-Item -Path $dir -Recurse -Force -ErrorAction SilentlyContinue
        }
    }
}

# Funci√≥n para limpiar logs de desarrollo
function Cleanup-Logs {
    Write-Host "üìù Limpiando logs de desarrollo..." -ForegroundColor Yellow
    
    $logFiles = @(
        "npm-debug.log",
        "yarn-debug.log",
        "yarn-error.log",
        ".eslintcache"
    )
    
    foreach ($file in $logFiles) {
        if (Test-Path $file) {
            Write-Host "  üóëÔ∏è Eliminando $file..." -ForegroundColor Red
            Remove-Item -Path $file -Force -ErrorAction SilentlyContinue
        }
    }
}

# Funci√≥n para verificar configuraci√≥n de Supabase
function Check-SupabaseConfig {
    Write-Host "üîç Verificando configuraci√≥n de Supabase..." -ForegroundColor Yellow
    
    $supabaseFile = "lib\supabase.ts"
    if (Test-Path $supabaseFile) {
        $content = Get-Content $supabaseFile -Raw
        
        # Verificar que tenga el patr√≥n singleton
        if ($content -match "__supabaseInitialized") {
            Write-Host "  ‚úÖ Patr√≥n Singleton implementado" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö†Ô∏è Patr√≥n Singleton no encontrado" -ForegroundColor Yellow
        }
        
        # Verificar configuraci√≥n de auth
        if ($content -match "persistSession: true") {
            Write-Host "  ‚úÖ Persistencia de sesi√≥n habilitada" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö†Ô∏è Persistencia de sesi√≥n no configurada" -ForegroundColor Yellow
        }
    } else {
        Write-Host "  ‚ùå Archivo lib\supabase.ts no encontrado" -ForegroundColor Red
    }
}

# Funci√≥n para verificar dependencias
function Check-Dependencies {
    Write-Host "üì¶ Verificando dependencias..." -ForegroundColor Yellow
    
    $packageJson = "package.json"
    if (Test-Path $packageJson) {
        $content = Get-Content $packageJson -Raw | ConvertFrom-Json
        
        # Verificar versi√≥n de Supabase
        $supabaseVersion = $content.dependencies.'@supabase/supabase-js'
        if ($supabaseVersion) {
            Write-Host "  ‚úÖ Supabase JS: $supabaseVersion" -ForegroundColor Green
        } else {
            Write-Host "  ‚ùå Supabase JS no encontrado en dependencias" -ForegroundColor Red
        }
        
        # Verificar Next.js
        $nextVersion = $content.dependencies.next
        if ($nextVersion) {
            Write-Host "  ‚úÖ Next.js: $nextVersion" -ForegroundColor Green
        } else {
            Write-Host "  ‚ùå Next.js no encontrado en dependencias" -ForegroundColor Red
        }
    }
}

# Funci√≥n para generar reporte de limpieza
function Generate-CleanupReport {
    Write-Host "üìä Generando reporte de limpieza..." -ForegroundColor Yellow
    
    $report = @{
        timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
        cleanup = @{
            tempFiles = "Eliminados"
            logs = "Eliminados"
            supabaseConfig = "Verificado"
            dependencies = "Verificadas"
        }
        recommendations = @(
            "Reiniciar el servidor de desarrollo",
            "Limpiar cach√© del navegador",
            "Verificar que no haya m√∫ltiples instancias de Supabase",
            "Revisar logs de la consola del navegador"
        )
    }
    
    $report | ConvertTo-Json -Depth 3 | Out-File -FilePath "cleanup-report.json" -Encoding UTF8
    Write-Host "  üìÑ Reporte guardado en cleanup-report.json" -ForegroundColor Green
}

# Funci√≥n para limpiar cach√© del navegador (instrucciones)
function Show-BrowserCacheInstructions {
    Write-Host "üåê Instrucciones para limpiar cach√© del navegador:" -ForegroundColor Cyan
    Write-Host "  Chrome/Edge: Ctrl+Shift+Delete -> Seleccionar 'Todo' -> Eliminar" -ForegroundColor White
    Write-Host "  Firefox: Ctrl+Shift+Delete -> Seleccionar 'Todo' -> Eliminar" -ForegroundColor White
    Write-Host "  O usar modo inc√≥gnito para pruebas" -ForegroundColor White
}

# Funci√≥n principal
function Main {
    try {
        Cleanup-TempFiles
        Cleanup-Logs
        Check-SupabaseConfig
        Check-Dependencies
        Generate-CleanupReport
        Show-BrowserCacheInstructions
        
        Write-Host "`n‚úÖ Limpieza completada exitosamente!" -ForegroundColor Green
        Write-Host "`nüìã Pr√≥ximos pasos:" -ForegroundColor Cyan
        Write-Host "  1. Ejecutar: npm run dev" -ForegroundColor White
        Write-Host "  2. Abrir DevTools y verificar consola" -ForegroundColor White
        Write-Host "  3. Buscar mensaje: '‚úÖ Supabase inicializado correctamente'" -ForegroundColor White
        Write-Host "  4. Verificar que NO aparezca: 'Multiple GoTrueClient instances'" -ForegroundColor White
        
    } catch {
        Write-Host "‚ùå Error durante la limpieza: $($_.Exception.Message)" -ForegroundColor Red
        exit 1
    }
}

# Ejecutar funci√≥n principal
Main
